- name: Install git, lsof, curl, moreutils and jq
  package: name={{ item }} state=present
  with_items:
    - git
    - lsof
    - curl
    - moreutils
    - jq

- name: Install apache letsencrypt-catchall
  copy: src=letsencrypt.conf dest=/etc/apache2/conf-available/letsencrypt.conf
  when: letsencrypt_enable_apache_catchall
  register: letsencrypt_apache2_catchall

- name: Enable apache letsencrypt-catchall
  file:
    src: "/etc/apache2/conf-available/letsencrypt.conf"
    dest: "/etc/apache2/conf-enabled/letsencrypt.conf"
    state: link
  when: letsencrypt_enable_apache_catchall

- name: Reload apache2
  service: name=apache2 state=reloaded
  when: letsencrypt_apache2_catchall is changed

- name: Create letsencrypt dir
  file: path={{ letsencrypt_dir }} state=directory

- name: Create acme-challenge dir
  file: path={{ letsencrypt_challenge_dir }} state=directory mode=o+x

- name: Download letsencrypt intermediate
  get_url:
    url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
    dest: "{{ letsencrypt_dir }}/lets-encrypt-x3-cross-signed.pem"

- name: Clone dehydrated
  git:
    repo: https://github.com/lukas2511/dehydrated.git
    dest: "{{ letsencrypt_dir }}/dehydrated"
    update: yes

- name: Make directories for certificates
  file:
    path: "{{ letsencrypt_dir }}/{{ item.name }}"
    state: directory
    owner: "{{ item.user|default(omit) }}"
    group : "{{ item.group|default(omit) }}"
    mode: go-rwx
  with_items: "{{ letsencrypt_certs }}"

- name: Create private key
  command: openssl genrsa -out {{ letsencrypt_dir }}/{{ item.name }}/domain.key 2048
  args:
    creates: "{{ letsencrypt_dir }}/{{ item.name }}/domain.key"
  with_items: "{{ letsencrypt_certs }}"

- name: Set user/group of private key
  file:
    path: "{{ letsencrypt_dir }}/{{ item.name }}/domain.key"
    owner: "{{ item.user|default(omit) }}"
    group : "{{ item.group|default(omit) }}"
    mode: go-rwx
  with_items: "{{ letsencrypt_certs }}"

- name: Create dehydrated.conf
  template: src=dehydrated.conf dest={{ letsencrypt_dir }}/{{ item.name }}/dehydrated.conf
  with_items: "{{ letsencrypt_certs }}"

- name: Create acme-dns hook
  template: src=acme-dns-hook.sh dest={{ letsencrypt_dir }}/{{ item.name }}/acme-dns-hook.sh mode=o+x
  when: item.subdomains|selectattr('acme_domain_id', 'defined')|list|length > 0
  with_items: "{{ letsencrypt_certs }}"

- name: Create renew script
  template: src=renew.sh dest={{ letsencrypt_dir }}/{{ item.name }}/renew.sh mode=o+x
  with_items: "{{ letsencrypt_certs }}"
  register: renew_script_result

- name: Register account
  command: ../dehydrated/dehydrated --register --accept-terms --config dehydrated.conf
  args:
    chdir: "{{ letsencrypt_dir }}/{{ item.name }}"
    creates: "{{ letsencrypt_dir }}/{{ item.name }}/accounts"
  with_items: "{{ letsencrypt_certs }}"

- name: Run certificate generation (dehydrated checks the expiry date, otherwise we would regenerate certs on every ansible deploy!)
  shell: "cd {{ letsencrypt_dir }}/{{ item.1.name }} && touch force && ./renew.sh"
  with_indexed_items: "{{ letsencrypt_certs }}"
  when: renew_script_result.results[item.0] is changed
  register: renew_result
  changed_when: "'Skipping renew' not in renew_result.stdout and renew_result.stdout != ''"

- name: Create renew cronjob
  template: src=cron dest=/etc/cron.d/letsencrypt

- name: Remove deprecated files
  file: path={{ letsencrypt_dir }}/{{ item[0].name }}/{{ item[1] }} state=absent
  with_nested:
    - "{{ letsencrypt_certs }}"
    - [ 'domain.csr', 'openssl.cnf' ]
